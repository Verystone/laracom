package main

import (
    "github.com/gin-gonic/gin"
    "github.com/micro/go-micro/client"
    "github.com/micro/go-micro/web"
    _ "github.com/nonfu/laracom/common/log"
    "github.com/nonfu/laracom/common/tracer"
    "github.com/nonfu/laracom/common/wrapper/tracer/opentracing/gin2micro"
    _ "github.com/nonfu/laracom/demo-api/docs" // docs is generated by Swag CLI, you have to import it.
    pb "github.com/nonfu/laracom/demo-service/proto/demo"
    "github.com/opentracing/opentracing-go"
    "github.com/sirupsen/logrus"
    swaggerFiles "github.com/swaggo/files"
    "github.com/swaggo/gin-swagger"
    "os"
)

type Say struct{}

var (
    cli pb.DemoServiceClient
)

// Anything godoc
// @Summary Say Hello
// @Description Say Hello With Default Name
// @Accept  json
// @Produce  json
// @Success 200 {string} string "{"text": "你好，学院君"}"
// @Router /hello [get]
func (s *Say) Anything(c *gin.Context) {
    logrus.Println("Received Say.Anything API request")
    c.JSON(200, map[string]string{
        "text": "你好，学院君",
    })
}

// Hello godoc
// @Summary Say Hello
// @Description Say Hello By Name
// @Name string
// @Accept  json
// @Produce  json
// @Param name path string true "User Name"
// @Success 200 {string} string "{"text": "你好，学院君"}"
// @Failure 500 {string} string
// @Router /hello/{name} [get]
func (s *Say) Hello(c *gin.Context) {
    logrus.Println("Received Say.Hello API request")

    name := c.Param("name")
    ctx, ok := gin2micro.ContextWithSpan(c)
    if ok == false {
        logrus.Errorln("get context err")
    }
    response, err := cli.SayHello(ctx, &pb.DemoRequest{
        Name: name,
    })

    if err != nil {
        c.JSON(500, err)
    }

    c.JSON(200, response)
}

// @title Demo API
// @version 1.0
// @description This is a sample demo api.

// @contact.name 学院君
// @contact.url https://xueyuanjun.com
// @contact.email yaojinbu@outlook.com

// @host localhost:8080
// @BasePath /demo
func main() {
    var name = "laracom.api.demo"
    // 初始化追踪器
    gin2micro.SetSamplingFrequency(50)
    t, io, err := tracer.NewTracer(name, os.Getenv("MICRO_TRACE_SERVER"))
    if err != nil {
        logrus.Fatal(err)
    }
    defer io.Close()
    opentracing.SetGlobalTracer(t)

    // Create service
    service := web.NewService(
        web.Name(name),
        web.Address(":8080"),
    )

    service.Init()

    // setup Demo Server Client
    cli = pb.NewDemoServiceClient("laracom.service.demo", client.DefaultClient)

    // Create RESTful handler (using Gin)
    say := new(Say)
    router := gin.Default()
    r := router.Group("/demo")
    r.Use(gin2micro.TracerWrapper)
    r.GET("/hello", say.Anything)
    r.GET("/hello/:name", say.Hello)

    // The url pointing to API definition
    url := ginSwagger.URL("http://localhost:8080/demo/swagger/doc.json")
    r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler, url))

    // Register Handler
    service.Handle("/", router)

    // Run server
    if err := service.Run(); err != nil {
        logrus.Fatal(err)
    }
}